export VIRTUALENVWRAPPER_PYTHON=`which python3`
export WORKON_HOME=$HOME/.virtualenvs
export CODE_DIR=$HOME/envs
source /usr/local/bin/virtualenvwrapper.sh

_fab_list(){
    # auto completion for fabfiles
    KEYWORDS=$(fab -l | grep '^ ' | awk '{ print $1 }')
    local cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "$KEYWORDS" -- ${cur}) )
}
complete -o default -o nospace -F _fab_list fab

_virtualenvs()
{
    PROJECTS=$((cd "$CODE_DIR"; for f in *; do echo $f; done) 2>/dev/null | sed 's|^\./||' | sed 's|/bin/activate||' | sort)
    local cur="${COMP_WORDS[COMP_CWORD]}"
    COMPREPLY=( $(compgen -W "$PROJECTS" -- ${cur}) )
}
complete -o default -o nospace -F _virtualenvs work

function work () {
    # A wrapper for workon (which is already a wrapper)
    # this assumes you have a 'src' dubdir in your
    # virtualenv
    #
    # This creates a rcfile for a virtualenv, creates a
    # subshell using it as rcfile, and goes to the src
    # dir in your virtualenv


    typeset env_name="$1"
    if [ "$env_name" = "" ]
    then
        virtualenvwrapper_show_workon_options
        return 1
    fi

    export VIRTUAL_ENV_NAME=$env_name
    echo "source ~/.bashrc
          pyenv activate $env_name
          cd "$CODE_DIR/$env_name"
		  direnv allow .
          " > ~/.virtualenvrc


    bash --rcfile ~/.virtualenvrc
}
